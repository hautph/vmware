#!/bin/bash

# ==============================================================================
# Script Qu·∫£n L√Ω GLPI To√†n Di·ªán cho Ubuntu 24.04 (Phi√™n b·∫£n Menu N√¢ng cao)
# T√°c gi·∫£: GLM-4.6
# M√¥ t·∫£: C√¥ng c·ª• menu-driven ƒë·ªÉ c√†i ƒë·∫∑t, qu·∫£n l√Ω, b·∫£o m·∫≠t v√† c·∫≠p nh·∫≠t GLPI.
# Phi√™n b·∫£n n√†y tu√¢n theo ph∆∞∆°ng ph√°p c√†i ƒë·∫∑t ch√≠nh th·ª©c (t·∫£i file .tgz).
# ==============================================================================

# --- C·∫§U H√åNH TO√ÄN C·ª§C ---
# Thay ƒë·ªïi c√°c gi√° tr·ªã n√†y n·∫øu c·∫ßn
DOMAIN_NAME="" # B·∫ÆT BU·ªòC: Nh·∫≠p t√™n mi·ªÅn c·ªßa b·∫°n, v√≠ d·ª•: glpi.yourdomain.com
SSH_NEW_PORT="2222" # Port SSH m·ªõi ƒë·ªÉ tƒÉng c∆∞·ªùng b·∫£o m·∫≠t

# Danh s√°ch c√°c plugin c·∫ßn c√†i ƒë·∫∑t t·ª´ GitHub
PLUGINS_TO_INSTALL=(
    "https://github.com/pluginsglpi/formcreator.git"
    "https://github.com/pluginsglpi/datainjection.git"
    # "https://github.com/another-user/another-plugin.git"
)

# --- KH√îNG THAY ƒê·ªîI PH·∫¶N D∆Ø·ªöI ƒê√ÇY N·∫æU B·∫†N KH√îNG CH·∫ÆC CH·∫ÆN ---

INSTALL_DIR="/var/www/glpi"
INFO_FILE="glpi_install_info.txt"
BACKUP_DIR="/var/backups/glpi"
PUBLIC_IP=""

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ==============================================================================
# H√ÄM H·ªñ TR·ª¢
# ==============================================================================

log_and_echo() {
    local message="$1"
    echo -e "${GREEN}[INFO]${NC} $message"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" >> "$INFO_FILE"
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}L·ªói: Script n√†y ph·∫£i ƒë∆∞·ª£c ch·∫°y v·ªõi quy·ªÅn root (sudo).${NC}" 1>&2
        exit 1
    fi
}

check_dependencies() {
    local deps=("curl" "wget" "unzip" "tar" "mysql" "nginx" "php8.3-fpm")
    local missing=()
    
    log_and_echo "Ki·ªÉm tra dependencies h·ªá th·ªëng..."
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null && ! systemctl is-active --quiet "$dep" 2>/dev/null; then
            missing+=("$dep")
        fi
    done
    
    if [[ ${#missing[@]} -gt 0 ]]; then
        echo -e "${RED}Thi·∫øu dependencies: ${missing[*]}${NC}"
        echo -e "${YELLOW}C√°c g√≥i n√†y s·∫Ω ƒë∆∞·ª£c c√†i ƒë·∫∑t t·ª± ƒë·ªông.${NC}"
        return 1
    fi
    
    log_and_echo "T·∫•t c·∫£ dependencies ƒë√£ s·∫µn s√†ng."
    return 0
}

check_php_compatibility() {
    log_and_echo "Ki·ªÉm tra phi√™n b·∫£n PHP..."
    local required_php="8.2"
    local current_php=$(php -r "echo PHP_VERSION;" 2>/dev/null || echo "0.0.0")
    
    if [[ $(echo -e "$required_php\n$current_php" | sort -V | head -n1) != "$required_php" ]]; then
        echo -e "${RED}PHP version $current_php kh√¥ng t∆∞∆°ng th√≠ch v·ªõi GLPI. C·∫ßn >= $required_php${NC}"
        return 1
    fi
    
    log_and_echo "PHP version $current_php t∆∞∆°ng th√≠ch v·ªõi GLPI."
    return 0
}

generate_password() {
    openssl rand -base64 32
}

get_public_ip() {
    if [[ -z "$PUBLIC_IP" ]]; then
        PUBLIC_IP=$(curl -s --connect-timeout 10 ifconfig.me || curl -s --connect-timeout 10 icanhazip.com || echo "UNKNOWN")
    fi
    echo "$PUBLIC_IP"
}

# ==============================================================================
# L·∫§Y PHI√äN B·∫¢N GLPI M·ªöI NH·∫§T T·ª™ GITHUB API
# ==============================================================================
get_latest_glpi_version() {
    echo -e "${BLUE}[KI·ªÇM TRA]${NC} ƒêang ki·ªÉm tra phi√™n b·∫£n GLPI m·ªõi nh·∫•t..."
    GLPI_VERSION=$(curl -s --connect-timeout 10 https://api.github.com/repos/glpi-project/glpi/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    if [[ -z "$GLPI_VERSION" ]]; then
        echo -e "${RED}L·ªói: Kh√¥ng th·ªÉ l·∫•y phi√™n b·∫£n GLPI m·ªõi nh·∫•t t·ª´ GitHub. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi Internet.${NC}"
        exit 1
    fi
    echo -e "Phi√™n b·∫£n GLPI m·ªõi nh·∫•t: ${GREEN}$GLPI_VERSION${NC}"
}

# ==============================================================================
# H√ÄM Y√äU C·∫¶U T√äN MI·ªÄN HO·∫∂C CH·ªåN IP (ƒê√É C·∫¨P NH·∫¨T)
# ==============================================================================
prompt_domain() {
    local detected_ips=()
    local interface_list=($(ip -o link show 2>/dev/null | awk -F': ' '{print $2}' || echo "lo"))
    local primary_ip=""

    # Ki·ªÉm tra v√† l·∫•y IP t·ª´ ens192 tr∆∞·ªõc
    if ip addr show ens192 &>/dev/null; then
        primary_ip=$(ip addr show ens192 | grep 'inet ' | awk '{print $2}' | cut -d/ -f1 | head -1)
        if [[ -n "$primary_ip" ]]; then
            detected_ips+=("$primary_ip (ens192)")
        fi
    fi

    # L·∫•y IP t·ª´ c√°c card m·∫°ng kh√°c
    for iface in "${interface_list[@]}"; do
        if [[ "$iface" != "ens192" && "$iface" != "lo" ]]; then
            local ip_addr=$(ip addr show "$iface" 2>/dev/null | grep 'inet ' | awk '{print $2}' | cut -d/ -f1 | head -1)
            if [[ -n "$ip_addr" ]]; then
                detected_ips+=("$ip_addr ($iface)")
            fi
        fi
    done

    # N·∫øu kh√¥ng t√¨m th·∫•y IP n√†o, th·ª≠ l·∫•y IP m·∫∑c ƒë·ªãnh
    if [[ ${#detected_ips[@]} -eq 0 ]]; then
        local default_ip=$(hostname -I | awk '{print $1}' 2>/dev/null)
        if [[ -n "$default_ip" ]]; then
            detected_ips+=("$default_ip (default)")
        fi
    fi

    while [[ -z "$DOMAIN_NAME" ]]; do
        echo -e "\n${YELLOW}--- C·∫§U H√åNH T√äN MI·ªÄN/ƒê·ªäA CH·ªà TRUY C·∫¨P ---${NC}"
        read -p "Nh·∫≠p t√™n mi·ªÅn c·ªßa b·∫°n cho GLPI (v√≠ d·ª•: glpi.example.com), ho·∫∑c ƒë·ªÉ tr·ªëng ƒë·ªÉ ch·ªçn IP: " input_domain
        
        if [[ -n "$input_domain" ]]; then
            DOMAIN_NAME="$input_domain"
            # Ki·ªÉm tra DNS
            local domain_ip
            domain_ip=$(dig +short "$DOMAIN_NAME" | head -1 2>/dev/null)
            if [[ -n "$domain_ip" ]]; then
                echo -e "T√™n mi·ªÅn ${GREEN}$DOMAIN_NAME${NC} ƒë√£ c√≥ th·ªÉ ph√¢n gi·∫£i th√†nh IP: $domain_ip"
            else
                echo -e "${YELLOW}C·∫£nh b√°o: T√™n mi·ªÅn $DOMAIN_NAME ch∆∞a ph√¢n gi·∫£i ƒë∆∞·ª£c qua DNS c√¥ng c·ªông.${NC}"
                echo -e "H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ c·∫•u h√¨nh b·∫£n ghi DNS lo·∫°i A tr·ªè ƒë·∫øn IP server."
            fi
        else
            if [[ ${#detected_ips[@]} -eq 0 ]]; then
                echo -e "${RED}Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ IP n√†o tr√™n h·ªá th·ªëng.${NC}"
                echo -e "${RED}Vui l√≤ng nh·∫≠p t√™n mi·ªÅn ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.${NC}"
                continue
            fi

            echo -e "\n${YELLOW}--- CH·ªåN ƒê·ªäA CH·ªà IP ---${NC}"
            echo -e "Ch·ªçn m·ªôt ƒë·ªãa ch·ªâ IP t·ª´ danh s√°ch d∆∞·ªõi ƒë√¢y:"
            PS3="Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: "
            select selected_ip in "${detected_ips[@]}"; do
                if [[ -n "$selected_ip" ]]; then
                    # Ch·ªâ l·∫•y ph·∫ßn IP
                    DOMAIN_NAME=$(echo "$selected_ip" | awk '{print $1}')
                    echo -e "B·∫°n ƒë√£ ch·ªçn IP: ${GREEN}$DOMAIN_NAME${NC}"
                    break
                else
                    echo -e "${RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.${NC}"
                fi
            done
        fi
    done
}

read_install_info() {
    if [[ -f "$INFO_FILE" ]]; then
        DB_USER=$(grep "GLPI Database User:" "$INFO_FILE" | cut -d' ' -f4)
        DB_PASSWORD=$(grep "GLPI Database Password:" "$INFO_FILE" | cut -d' ' -f4)
        DB_NAME=$(grep "GLPI Database Name:" "$INFO_FILE" | cut -d' ' -f4)
        MYSQL_ROOT_PASSWORD=$(grep "MySQL Root Password:" "$INFO_FILE" | cut -d' ' -f4)
        DOMAIN_NAME=$(grep "T√™n mi·ªÅn:" "$INFO_FILE" | cut -d' ' -f3)
        return 0
    fi
    return 1
}

secure_mysql_installation() {
    log_and_echo "Thi·∫øt l·∫≠p b·∫£o m·∫≠t MySQL..."
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" <<EOF 2>/dev/null
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
FLUSH PRIVILEGES;
EOF
    log_and_echo "ƒê√£ ho√†n t·∫•t b·∫£o m·∫≠t MySQL."
}

cleanup_resources() {
    log_and_echo "D·ªçn d·∫πp t√†i nguy√™n t·∫°m..."
    apt autoremove -y 2>/dev/null
    apt clean 2>/dev/null
    rm -rf /tmp/glpi-* 2>/dev/null
    log_and_echo "D·ªçn d·∫πp ho√†n t·∫•t."
}

health_check() {
    echo -e "\n${YELLOW}========================================${NC}"
    echo -e "${YELLOW}          KI·ªÇM TRA S·ª®C KH·ªéE H·ªÜ TH·ªêNG     ${NC}"
    echo -e "${YELLOW}========================================${NC}"
    
    log_and_echo "Ki·ªÉm tra t√¨nh tr·∫°ng h·ªá th·ªëng..."
    
    # Ki·ªÉm tra services
    local services=("nginx" "mysql" "php8.3-fpm")
    for service in "${services[@]}"; do
        if systemctl is-active --quiet "$service"; then
            echo -e "‚úÖ $service: ${GREEN}ƒêang ch·∫°y${NC}"
        else
            echo -e "‚ùå $service: ${RED}Kh√¥ng ch·∫°y${NC}"
        fi
    done
    
    # Ki·ªÉm tra GLPI
    if [[ -f "$INSTALL_DIR/config/config_db.php" ]]; then
        echo -e "‚úÖ GLPI config: ${GREEN}T·ªìn t·∫°i${NC}"
    else
        echo -e "‚ùå GLPI config: ${RED}Kh√¥ng t·ªìn t·∫°i${NC}"
    fi
    
    # Ki·ªÉm tra database connection
    if [[ -n "$DB_NAME" && -n "$DB_USER" && -n "$DB_PASSWORD" ]]; then
        if mysql -u "$DB_USER" -p"$DB_PASSWORD" -e "USE $DB_NAME;" &>/dev/null; then
            echo -e "‚úÖ Database connection: ${GREEN}Th√†nh c√¥ng${NC}"
        else
            echo -e "‚ùå Database connection: ${RED}Th·∫•t b·∫°i${NC}"
        fi
    fi
    
    # Ki·ªÉm tra disk space
    local disk_usage=$(df -h "$INSTALL_DIR" | awk 'NR==2 {print $5}')
    echo -e "üìä Disk usage: $disk_usage"
    
    # Ki·ªÉm tra memory
    local mem_usage=$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')
    echo -e "üíæ Memory usage: $mem_usage"
}

# ==============================================================================
# MODULE 1: C√ÄI ƒê·∫∂T GLPI (ƒê√É VI·∫æT L·∫†I THEO T√ÄI LI·ªÜU CH√çNH TH·ª®C)
# ==============================================================================
install_glpi_module() {
    if [[ -d "$INSTALL_DIR" && -f "$INSTALL_DIR/config/config_db.php" && -f "$INSTALL_DIR/inc/define.php" && -f "$INSTALL_DIR/bin/console" ]]; then
        echo -e "${YELLOW}GLPI ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† ho·∫°t ƒë·ªông t·ªët. B·ªè qua b∆∞·ªõc c√†i ƒë·∫∑t.${NC}"
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
        return
    fi

    echo -e "\n${YELLOW}========================================${NC}"
    echo -e "${YELLOW}       B·∫ÆT ƒê·∫¶U C√ÄI ƒê·∫∂T/GLPI L·∫†I       ${NC}"
    echo -e "${YELLOW}========================================${NC}\n"
    
    if [[ -d "$INSTALL_DIR" ]]; then
        echo -e "${RED}Ph√°t hi·ªán th∆∞ m·ª•c GLPI t·ªìn t·∫°i nh∆∞ng c√†i ƒë·∫∑t kh√¥ng ho√†n ch·ªânh.${NC}"
        read -p "B·∫°n c√≥ mu·ªën x√≥a v√† c√†i l·∫°i ho√†n to√†n kh√¥ng? (y/N): " choice
        if [[ "$choice" != "y" && "$choice" != "Y" ]]; then
            echo -e "H·ªßy c√†i ƒë·∫∑t."
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
            return
        fi
        log_and_echo "ƒêang x√≥a th∆∞ m·ª•c c√†i ƒë·∫∑t c≈©..."
        rm -rf "$INSTALL_DIR"
    fi

    local use_saved_domain=false
    if read_install_info; then
        echo -e "T√¨m th·∫•y th√¥ng tin c√†i ƒë·∫∑t c≈© v·ªõi t√™n mi·ªÅn: ${YELLOW}$DOMAIN_NAME${NC}"
        read -p "B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng l·∫°i t√™n mi·ªÅn n√†y kh√¥ng? (Y/n): " choice
        case "$choice" in
            n|N ) use_saved_domain=false ;;
            * ) use_saved_domain=true ;;
        esac
    fi

    if [[ "$use_saved_domain" = false ]]; then
        prompt_domain
    fi
    
    # L·∫•y public IP n·∫øu ch∆∞a c√≥
    get_public_ip > /dev/null
    
    echo -e "\n${YELLOW}--- G·ª¢I √ù C·∫§U H√åNH DNS ---${NC}"
    local domain_ip
    domain_ip=$(dig +short "$DOMAIN_NAME" | head -1 2>/dev/null)
    if [[ -n "$domain_ip" ]]; then
        echo -e "T√™n mi·ªÅn ${GREEN}$DOMAIN_NAME${NC} ƒë√£ c√≥ th·ªÉ ph√¢n gi·∫£i th√†nh IP: $domain_ip"
    else
        echo -e "H√£y t·∫°o b·∫£n ghi DNS lo·∫°i ${GREEN}'A'${NC} v·ªõi n·ªôi dung:"
        echo -e "${BLUE}T√™n mi·ªÅn: $DOMAIN_NAME${NC}"
        echo -e "${BLUE}Tr·ªè ƒë·∫øn IP: $PUBLIC_IP${NC}"
    fi
    read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..."

    echo "=== TH√îNG TIN C√ÄI ƒê·∫∂T GLPI - $(date) ===" > "$INFO_FILE"
    echo "T√™n mi·ªÅn: $DOMAIN_NAME" >> "$INFO_FILE"
    echo "IP c√¥ng khai: $PUBLIC_IP" >> "$INFO_FILE"
    echo "" >> "$INFO_FILE"

    log_and_echo "C·∫≠p nh·∫≠t h·ªá th·ªëng v√† c√†i ƒë·∫∑t c√°c g√≥i LEMP stack v√† PHP..."
    apt update && apt upgrade -y
    apt install -y nginx mysql-server php8.3-fpm php8.3-mysql php8.3-curl php8.3-gd php8.3-intl php8.3-xmlrpc php8.3-apcu php8.3-ldap php8.3-imap php8.3-xml php8.3-mbstring php8.3-bz2 php8.3-zip php8.3-bcmath certbot python3-certbot-nginx

    log_and_echo "C·∫•u h√¨nh MySQL b·∫£o m·∫≠t v√† d·ªçn d·∫πp c√†i ƒë·∫∑t c≈©..."
    DB_NAME="glpi_db"
    DB_USER="glpi_user"
    DB_PASSWORD=$(generate_password)
    MYSQL_ROOT_PASSWORD=$(generate_password)
    
    # C·∫•u h√¨nh MySQL root password
    mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '$MYSQL_ROOT_PASSWORD';" 2>/dev/null || {
        echo -e "${RED}L·ªói c·∫•u h√¨nh MySQL root password${NC}"
        exit 1
    }

    # D·ªçn d·∫πp user/database c≈© v√† t·∫°o m·ªõi
    mysql -u root -p"$MYSQL_ROOT_PASSWORD" <<EOF 2>/dev/null
DROP USER IF EXISTS '$DB_USER'@'localhost';
DROP DATABASE IF EXISTS $DB_NAME;
CREATE DATABASE $DB_NAME CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER '$DB_USER'@'localhost' IDENTIFIED WITH mysql_native_password BY '$DB_PASSWORD';
GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';
FLUSH PRIVILEGES;
EOF

    secure_mysql_installation
    
    echo "MySQL Root Password: $MYSQL_ROOT_PASSWORD" >> "$INFO_FILE"
    echo "GLPI Database Name: $DB_NAME" >> "$INFO_FILE"
    echo "GLPI Database User: $DB_USER" >> "$INFO_FILE"
    echo "GLPI Database Password: $DB_PASSWORD" >> "$INFO_FILE"

    log_and_echo "T·∫£i v√† c√†i ƒë·∫∑t GLPI phi√™n b·∫£n $GLPI_VERSION t·ª´ file n√©n..."
    cd /tmp
    wget -q "https://github.com/glpi-project/glpi/releases/download/$GLPI_VERSION/glpi-$GLPI_VERSION.tgz"
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}L·ªói t·∫£i GLPI t·ª´ GitHub. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.${NC}"
        exit 1
    fi
    tar -xzf "glpi-$GLPI_VERSION.tgz"
    rm -rf "$INSTALL_DIR"
    mv glpi "$INSTALL_DIR"
    rm "glpi-$GLPI_VERSION.tgz"

    chown -R www-data:www-data "$INSTALL_DIR"
    find "$INSTALL_DIR" -type d -exec chmod 755 {} \;
    find "$INSTALL_DIR" -type f -exec chmod 644 {} \;

    log_and_echo "C·∫•u h√¨nh PHP..."
    PHP_INI_FILE="/etc/php/8.3/fpm/php.ini"
    sed -i "s/memory_limit = .*/memory_limit = 256M/; s/upload_max_filesize = .*/upload_max_filesize = 64M/; s/post_max_size = .*/post_max_size = 64M/; s/max_execution_time = .*/max_execution_time = 300/; s/;date.timezone.*/date.timezone = Asia\/Ho_Chi_Minh/; s/expose_php = On/expose_php = Off/" "$PHP_INI_FILE"
    systemctl restart php8.3-fpm

    log_and_echo "T·∫°o file c·∫•u h√¨nh Nginx ban ƒë·∫ßu (ch·ªâ HTTP)..."
    NGINX_CONF_FILE="/etc/nginx/sites-available/$DOMAIN_NAME"
    cat > "$NGINX_CONF_FILE" <<EOF
server {
    listen 80;
    server_name $DOMAIN_NAME;

    root $INSTALL_DIR;
    index index.php index.html index.htm;

    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    server_tokens off;

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        include fastcgi_params;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    location ~ /\. { deny all; }
    location ~ ^/(config|templates|inc|vendor|tests|scripts|tools|install)/ { deny all; }
}
EOF
    ln -sf "$NGINX_CONF_FILE" "/etc/nginx/sites-enabled/"
    rm -f "/etc/nginx/sites-enabled/default"
    nginx -t && systemctl restart nginx

    log_and_echo "C√†i ƒë·∫∑t ch·ª©ng ch·ªâ SSL v·ªõi Certbot..."
    if [[ "$DOMAIN_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo -e "${YELLOW}Ph√°t hi·ªán b·∫°n ƒëang s·ª≠ d·ª•ng ƒë·ªãa ch·ªâ IP. B·ªè qua c√†i ƒë·∫∑t SSL.${NC}"
    else
        local domain_ip
        domain_ip=$(dig +short "$DOMAIN_NAME" | head -1)
        if [[ "$domain_ip" == "$PUBLIC_IP" ]]; then
            certbot --nginx -d "$DOMAIN_NAME" --non-interactive --agree-tos --email "admin@$DOMAIN_NAME" --redirect
            log_and_echo "Certbot ƒë√£ c√†i ƒë·∫∑t SSL v√† c·∫•u h√¨nh Nginx."
        else
            echo -e "${YELLOW}C·∫£nh b√°o: T√™n mi·ªÅn $DOMAIN_NAME ch∆∞a tr·ªè v·ªÅ IP $PUBLIC_IP. B·ªè qua c√†i ƒë·∫∑t SSL.${NC}"
            echo -e "B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i l·ªánh sau khi DNS ƒë√£ c·∫≠p nh·∫≠t: ${GREEN}sudo certbot --nginx -d $DOMAIN_NAME${NC}"
        fi
    fi

    log_and_echo "C·∫•u h√¨nh database cho GLPI..."
    cd "$INSTALL_DIR"
    sudo -u www-data php bin/console glpi:database:install \
        --db-host=localhost \
        --db-name="$DB_NAME" \
        --db-user="$DB_USER" \
        --db-password="$DB_PASSWORD" \
        --default-language=vi_VN

    cat > "$INSTALL_DIR/config/config_db.php" <<EOF
<?php
class DB extends DBmysql {
    public \$dbhost = 'localhost';
    public \$dbuser = '$DB_USER';
    public \$dbpassword = '$DB_PASSWORD';
    public \$dbdefault = '$DB_NAME';
}
EOF
    chown www-data:www-data "$INSTALL_DIR/config/config_db.php"
    rm -rf "$INSTALL_DIR/install"
    (crontab -l 2>/dev/null; echo "*/2 * * * * www-data /usr/bin/php $INSTALL_DIR/front/cron.php &>/dev/null") | crontab -
    
    cleanup_resources
    log_and_echo "C√†i ƒë·∫∑t GLPI ho√†n t·∫•t."
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
}

# ==============================================================================
# MODULE 2: BACKUP T·ª∞ ƒê·ªòNG
# ==============================================================================
setup_backup_module() {
    if ! read_install_info; then 
        echo -e "${RED}Ch∆∞a c√≥ th√¥ng tin c√†i ƒë·∫∑t. Vui l√≤ng ch·∫°y 'C√†i ƒë·∫∑t GLPI' tr∆∞·ªõc.${NC}"
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
        return
    fi
    if [[ ! -f "$INSTALL_DIR/config/config_db.php" ]]; then
        echo -e "${RED}File c·∫•u h√¨nh database c·ªßa GLPI kh√¥ng t·ªìn t·∫°i. C√†i ƒë·∫∑t c√≥ th·ªÉ b·ªã l·ªói.${NC}"
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
        return
    fi
    if crontab -l 2>/dev/null | grep -q "glpi_backup.sh"; then 
        echo -e "${YELLOW}Backup t·ª± ƒë·ªông ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh.${NC}"
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
        return
    fi

    echo -e "\n${YELLOW}========================================${NC}"
    echo -e "${YELLOW}       C·∫§U H√åNH BACKUP T·ª∞ ƒê·ªòNG       ${NC}"
    echo -e "${YELLOW}========================================${NC}\n"

    log_and_echo "Thi·∫øt l·∫≠p backup t·ª± ƒë·ªông..."
    mkdir -p "$BACKUP_DIR"
    cat > /usr/local/bin/glpi_backup.sh <<EOF
#!/bin/bash
BACKUP_DIR="$BACKUP_DIR"
INSTALL_DIR="$INSTALL_DIR"
DB_NAME="$DB_NAME"
DB_USER="$DB_USER"
DB_PASSWORD="$DB_PASSWORD"
DATE=\$(date +%F_%T)
mysqldump -u "\$DB_USER" -p"\$DB_PASSWORD" "\$DB_NAME" | gzip > "\$BACKUP_DIR/glpi_db_\$DATE.sql.gz"
tar -czf "\$BACKUP_DIR/glpi_files_\$DATE.tar.gz" -C "\$(dirname "\$INSTALL_DIR")" "\$(basename "\$INSTALL_DIR")"
find "\$BACKUP_DIR" -type f -mtime +7 -delete
EOF
    chmod +x /usr/local/bin/glpi_backup.sh

    # Th√™m t√≠nh nƒÉng rollback
    cat > /usr/local/bin/glpi_rollback.sh <<EOF
#!/bin/bash
BACKUP_DIR="$BACKUP_DIR"
INSTALL_DIR="$INSTALL_DIR"
DB_NAME="$DB_NAME"
DB_USER="$DB_USER"
DB_PASSWORD="$DB_PASSWORD"

echo -e "C√°c b·∫£n backup c√≥ s·∫µn:"
echo -e "=========================="
ls -1t "\$BACKUP_DIR"/glpi_files_*.tar.gz 2>/dev/null | head -5 | while read file; do
    echo -n "üìÅ "; basename "\$file"
done
ls -1t "\$BACKUP_DIR"/glpi_db_*.sql.gz 2>/dev/null | head -5 | while read file; do
    echo -n "üóÉÔ∏è "; basename "\$file"
done
echo -e "=========================="

read -p "Nh·∫≠p t√™n file backup ƒë·ªÉ rollback (kh√¥ng c·∫ßn ƒë∆∞·ªùng d·∫´n): " backup_file
if [[ -f "\$BACKUP_DIR/\$backup_file" ]]; then
    echo -e "‚ö†Ô∏è  B·∫Øt ƒë·∫ßu rollback t·ª´ \$backup_file..."
    
    if [[ "\$backup_file" == glpi_files_* ]]; then
        systemctl stop nginx php8.3-fpm
        tar -xzf "\$BACKUP_DIR/\$backup_file" -C /
        systemctl start nginx php8.3-fpm
        echo -e "‚úÖ Rollback files ho√†n t·∫•t!"
    elif [[ "\$backup_file" == glpi_db_* ]]; then
        mysql -u "\$DB_USER" -p"\$DB_PASSWORD" "\$DB_NAME" < <(zcat "\$BACKUP_DIR/\$backup_file")
        echo -e "‚úÖ Rollback database ho√†n t·∫•t!"
    else
        echo -e "‚ùå ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!"
    fi
else
    echo -e "‚ùå File backup kh√¥ng t·ªìn t·∫°i!"
fi
EOF
    chmod +x /usr/local/bin/glpi_rollback.sh

    (crontab -l 2>/dev/null; echo "0 2 * * * /usr/local/bin/glpi_backup.sh") | crontab -
    log_and_echo "ƒê√£ c·∫•u h√¨nh backup t·ª± ƒë·ªông h√†ng ng√†y l√∫c 2:00 s√°ng."
    log_and_echo "S·ª≠ d·ª•ng l·ªánh: ${GREEN}sudo /usr/local/bin/glpi_rollback.sh${NC} ƒë·ªÉ kh√¥i ph·ª•c"
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
}

# ==============================================================================
# MODULE 3: C·∫¨P NH·∫¨T GLPI
# ==============================================================================
update_glpi_module() {
    if ! read_install_info; then 
        echo -e "${RED}Ch∆∞a c√≥ th√¥ng tin c√†i ƒë·∫∑t. Vui l√≤ng ch·∫°y 'C√†i ƒë·∫∑t GLPI' tr∆∞·ªõc.${NC}"
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
        return
    fi
    if [[ ! -f "$INSTALL_DIR/inc/define.php" ]]; then
        echo -e "${RED}File c·ªët l√µi c·ªßa GLPI kh√¥ng t·ªìn t·∫°i. C√†i ƒë·∫∑t c√≥ th·ªÉ b·ªã l·ªói ho·∫∑c ch∆∞a ho√†n t·∫•t.${NC}"
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
        return
    fi

    echo -e "\n${YELLOW}========================================${NC}"
    echo -e "${YELLOW}          KI·ªÇM TRA C·∫¨P NH·∫¨T GLPI         ${NC}"
    echo -e "${YELLOW}========================================${NC}\n"

    CURRENT_VERSION=$(grep "define('GLPI_VERSION'" "$INSTALL_DIR/inc/define.php" | cut -d "'" -f 4)
    LATEST_VERSION=$(curl -s --connect-timeout 10 https://api.github.com/repos/glpi-project/glpi/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    echo -e "Phi√™n b·∫£n hi·ªán t·∫°i: ${BLUE}$CURRENT_VERSION${NC}"
    echo -e "Phi√™n b·∫£n m·ªõi nh·∫•t: ${GREEN}$LATEST_VERSION${NC}"

    if [[ "$CURRENT_VERSION" == "$LATEST_VERSION" ]]; then
        log_and_echo "B·∫°n ƒëang s·ª≠ d·ª•ng phi√™n b·∫£n m·ªõi nh·∫•t."
    else
        read -p "B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t kh√¥ng? (y/N): " choice
        if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
            log_and_echo "B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t GLPI..."
            
            # Backup tr∆∞·ªõc khi update
            if [[ -f "/usr/local/bin/glpi_backup.sh" ]]; then
                /usr/local/bin/glpi_backup.sh
            else
                echo -e "${YELLOW}C·∫£nh b√°o: Script backup kh√¥ng t·ªìn t·∫°i, t·∫°o backup th·ªß c√¥ng...${NC}"
                mkdir -p "$BACKUP_DIR"
                mysqldump -u "$DB_USER" -p"$DB_PASSWORD" "$DB_NAME" | gzip > "$BACKUP_DIR/glpi_db_update_$(date +%F_%T).sql.gz"
                tar -czf "$BACKUP_DIR/glpi_files_update_$(date +%F_%T).tar.gz" -C "$(dirname "$INSTALL_DIR")" "$(basename "$INSTALL_DIR")"
            fi
            
            cd "$INSTALL_DIR"
            php bin/console glpi:maintenance:enable
            
            cd /tmp
            wget -q "https://github.com/glpi-project/glpi/releases/download/$LATEST_VERSION/glpi-$LATEST_VERSION.tgz"
            tar -xzf "glpi-$LATEST_VERSION.tgz"
            rm -rf "$INSTALL_DIR.bak"
            mv "$INSTALL_DIR" "$INSTALL_DIR.bak"
            mv glpi "$INSTALL_DIR"
            rm "glpi-$LATEST_VERSION.tgz"
            
            cp -rp "$INSTALL_DIR.bak/config" "$INSTALL_DIR/"
            cp -rp "$INSTALL_DIR.bak/files" "$INSTALL_DIR/"
            chown -R www-data:www-data "$INSTALL_DIR"
            
            cd "$INSTALL_DIR"
            php bin/console glpi:database:update --no-interaction
            php bin/console glpi:maintenance:disable
            
            log_and_echo "C·∫≠p nh·∫≠t GLPI th√†nh c√¥ng ƒë·∫øn phi√™n b·∫£n $LATEST_VERSION."
        fi
    fi
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
}

# ==============================================================================
# MODULE 4: B·∫¢O M·∫¨T SERVER (HARDENING)
# ==============================================================================
harden_server_module() {
    echo -e "\n${YELLOW}========================================${NC}"
    echo -e "${YELLOW}      B·∫¢O M·∫¨T SERVER (HARDENING)      ${NC}"
    echo -e "${YELLOW}========================================${NC}\n"

    log_and_echo "ƒê·∫£m b·∫£o t∆∞·ªùng l·ª≠a UFW ƒëang ho·∫°t ƒë·ªông..."
    ufw --force enable

    if ! systemctl is-active --quiet fail2ban; then
        log_and_echo "C·∫•u h√¨nh Fail2Ban..."
        cat > /etc/fail2ban/jail.local <<EOF
[DEFAULT]
bantime = 3600; findtime = 600; maxretry = 3
[sshd]
enabled = true; port = $SSH_NEW_PORT; logpath = /var/log/auth.log
[glpi]
enabled = true; port = http,https; filter = glpi-auth; logpath = $INSTALL_DIR/files/_log/php-errors.log; maxretry = 5
EOF
        cat > /etc/fail2ban/filter.d/glpi-auth.conf <<'EOF'
[Definition]
failregex = .*Failed login for .* from <HOST>.*
ignoreregex =
EOF
        systemctl enable fail2ban
        systemctl restart fail2ban
    else
        log_and_echo "Fail2ban ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† ƒëang ch·∫°y."
    fi

    echo -e "${RED}‚ö†Ô∏è  C·∫¢NH B√ÅO QUAN TR·ªåNG:${NC}"
    echo -e "B·∫°n s·∫Øp thay ƒë·ªïi port SSH t·ª´ 22 th√†nh $SSH_NEW_PORT"
    echo -e "H√£y ƒë·∫£m b·∫£o b·∫°n ƒë√£ c·∫•u h√¨nh firewall cho ph√©p port $SSH_NEW_PORT"
    echo -e "N·∫øu kh√¥ng, b·∫°n c√≥ th·ªÉ b·ªã m·∫•t k·∫øt n·ªëi SSH!"
    read -p "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/NO): " confirm
    if [[ "$confirm" != "yes" ]]; then
        echo -e "${YELLOW}ƒê√£ h·ªßy thay ƒë·ªïi SSH.${NC}"
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
        return
    fi

    log_and_echo "Hardening SSH..."
    sed -i "s/#Port 22/Port $SSH_NEW_PORT/" /etc/ssh/sshd_config
    sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
    sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
    
    ufw delete allow OpenSSH &>/dev/null
    ufw allow "$SSH_NEW_PORT/tcp" &>/dev/null
    ufw --force reload &>/dev/null
    
    echo -e "${RED}C·∫¢NH B√ÅO: ƒê√£ thay ƒë·ªïi port SSH th√†nh $SSH_NEW_PORT v√† v√¥ hi·ªáu h√≥a ƒëƒÉng nh·∫≠p root/m·∫≠t kh·∫©u.${NC}"
    read -p "Kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• SSH ngay b√¢y gi·ªù? (y/N): " restart_ssh
    if [[ "$restart_ssh" == "y" || "$restart_ssh" == "Y" ]]; then
        systemctl restart sshd
        log_and_echo "ƒê√£ kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• SSH. Port m·ªõi: $SSH_NEW_PORT."
    else
        log_and_echo "Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i SSH th·ªß c√¥ng: systemctl restart sshd"
    fi
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
}

# ==============================================================================
# MODULE 5: C√ÄI ƒê·∫∂T PLUGIN
# ==============================================================================
install_plugins_module() {
    if ! read_install_info; then 
        echo -e "${RED}Ch∆∞a c√≥ th√¥ng tin c√†i ƒë·∫∑t. Vui l√≤ng ch·∫°y 'C√†i ƒë·∫∑t GLPI' tr∆∞·ªõc.${NC}"
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
        return
    fi
    if [[ ! -f "$INSTALL_DIR/bin/console" ]]; then
        echo -e "${RED}L·ªánh qu·∫£n l√Ω GLPI (bin/console) kh√¥ng t·ªìn t·∫°i. C√†i ƒë·∫∑t c√≥ th·ªÉ b·ªã l·ªói ho·∫∑c ch∆∞a ho√†n t·∫•t.${NC}"
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
        return
    fi
    if [[ ${#PLUGINS_TO_INSTALL[@]} -eq 0 ]]; then 
        echo -e "${YELLOW}Kh√¥ng c√≥ plugin n√†o trong danh s√°ch ƒë·ªÉ c√†i.${NC}"
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
        return
    fi

    echo -e "\n${YELLOW}========================================${NC}"
    echo -e "${YELLOW}         C√ÄI ƒê·∫∂T PLUGIN T·ª™ DANH S√ÅCH      ${NC}"
    echo -e "${YELLOW}========================================${NC}\n"

    for PLUGIN_URL in "${PLUGINS_TO_INSTALL[@]}"; do
        PLUGIN_NAME=$(basename "$PLUGIN_URL" .git)
        if [[ -d "$INSTALL_DIR/plugins/$PLUGIN_NAME" ]]; then
            log_and_echo "Plugin $PLUGIN_NAME ƒë√£ t·ªìn t·∫°i, b·ªè qua."
            continue
        fi
        log_and_echo "ƒêang c√†i ƒë·∫∑t plugin: $PLUGIN_NAME..."
        cd "$INSTALL_DIR/plugins"
        if git clone "$PLUGIN_URL"; then
            chown -R www-data:www-data "$PLUGIN_NAME"
            cd "$INSTALL_DIR"
            php bin/console glpi:plugin:install "$PLUGIN_NAME"
            php bin/console glpi:plugin:activate "$PLUGIN_NAME"
            log_and_echo "ƒê√£ c√†i ƒë·∫∑t v√† k√≠ch ho·∫°t plugin $PLUGIN_NAME."
        else
            echo -e "${RED}Kh√¥ng th·ªÉ clone repository t·ª´ $PLUGIN_URL${NC}"
        fi
    done
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
}

# ==============================================================================
# MENU QU·∫¢N L√ù H·ªÜ TH·ªêNG
# ==============================================================================
show_management_menu() {
    clear
    echo -e "${GREEN}========================================${NC}"
    echo -e "${GREEN}   QU·∫¢N L√ù GLPI - MENU PH·ª§${NC}"
    echo -e "${GREEN}========================================${NC}"
    echo -e "  1. Xem tr·∫°ng th√°i d·ªãch v·ª•"
    echo -e "  2. Kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• GLPI"
    echo -e "  3. Xem log GLPI"
    echo -e "  4. Rollback t·ª´ backup"
    echo -e "  5. Ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng"
    echo -e "  6. D·ªçn d·∫πp h·ªá th·ªëng"
    echo -e "  7. Quay l·∫°i menu ch√≠nh"
    echo -e "${GREEN}========================================${NC}"
}

management_loop() {
    while true; do
        show_management_menu
        read -p "Nh·∫≠p l·ª±a ch·ªçn [1-7]: " choice
        case $choice in
            1) 
                echo -e "\n${YELLOW}--- TR·∫†NG TH√ÅI D·ªäCH V·ª§ ---${NC}"
                systemctl status nginx --no-pager -l
                echo -e "\n---"
                systemctl status mysql --no-pager -l
                echo -e "\n---"
                systemctl status php8.3-fpm --no-pager -l
                ;;
            2) 
                log_and_echo "Kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• GLPI..."
                systemctl restart nginx mysql php8.3-fpm
                echo -e "${GREEN}ƒê√£ kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ d·ªãch v·ª•.${NC}"
                ;;
            3) 
                if [[ -f "$INSTALL_DIR/files/_log/php-errors.log" ]]; then
                    echo -e "\n${YELLOW}--- LOG GLPI (50 d√≤ng cu·ªëi) ---${NC}"
                    tail -50 "$INSTALL_DIR/files/_log/php-errors.log"
                else
                    echo -e "${RED}File log GLPI kh√¥ng t·ªìn t·∫°i.${NC}"
                fi
                ;;
            4) 
                if [[ -f "/usr/local/bin/glpi_rollback.sh" ]]; then
                    /usr/local/bin/glpi_rollback.sh
                else
                    echo -e "${RED}Script rollback kh√¥ng t·ªìn t·∫°i. H√£y c·∫•u h√¨nh backup tr∆∞·ªõc.${NC}"
                fi
                ;;
            5) health_check ;;
            6) cleanup_resources ;;
            7) break ;;
            *) echo -e "${RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá${NC}" ;;
        esac
        read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..."
    done
}

# ==============================================================================
# MENU CH√çNH
# ==============================================================================
show_menu() {
    clear
    echo -e "${GREEN}========================================${NC}"
    echo -e "${GREEN}   C√îNG C·ª§ QU·∫¢N L√ù GLPI TO√ÄN DI·ªÜN   ${NC}"
    echo -e "${GREEN}========================================${NC}"
    echo -e "  1. Ch·∫°y t·∫•t c·∫£ (C√†i ƒë·∫∑t + C·∫•u h√¨nh + B·∫£o m·∫≠t)"
    echo -e "  2. C√†i ƒë·∫∑t GLPI (m·ªõi)"
    echo -e "  3. C·∫•u h√¨nh Backup T·ª± ƒë·ªông"
    echo -e "  4. C·∫≠p nh·∫≠t GLPI"
    echo -e "  5. B·∫£o m·∫≠t Server (Hardening)"
    echo -e "  6. C√†i ƒë·∫∑t Plugin t·ª´ GitHub"
    echo -e "  7. Qu·∫£n l√Ω h·ªá th·ªëng"
    echo -e "  8. Ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng"
    echo -e "  9. Tho√°t"
    echo -e "${GREEN}========================================${NC}"
}

show_final_info() {
    if ! read_install_info; then return; fi
    echo -e "\n${GREEN}================================================================================================${NC}"
    echo -e "${GREEN}            T·∫§T C·∫¢ C√ÅC T√ÅC V·ª§ ƒê√É HO√ÄN T·∫§T!${NC}"
    echo -e "${GREEN}================================================================================================${NC}"
    
    local url_scheme="http"
    if [[ ! "$DOMAIN_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        url_scheme="https"
    fi

    echo -e "URL truy c·∫≠p: ${YELLOW}$url_scheme://$DOMAIN_NAME${NC}"
    echo -e "T√†i kho·∫£n m·∫∑c ƒë·ªãnh: ${YELLOW}glpi / glpi${NC}"
    echo -e "Port SSH m·ªõi: ${YELLOW}$SSH_NEW_PORT${NC}"
    echo -e "\n${RED}L∆ØU √ù QUAN TR·ªåNG:${NC}"
    echo -e "1. H√£y ƒë·ªïi m·∫≠t kh·∫©u cho c√°c t√†i kho·∫£n m·∫∑c ƒë·ªãnh ngay l·∫≠p t·ª©c."
    echo -e "2. To√†n b·ªô th√¥ng tin quan tr·ªçng ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o file: ${YELLOW}$(pwd)/$INFO_FILE${NC}"
    echo -e "3. H√£y ki·ªÉm tra l·∫°i c√°c c·∫•u h√¨nh v√† ƒë·∫£m b·∫£o h·ªá th·ªëng c·ªßa b·∫°n ho·∫°t ƒë·ªông ƒë√∫ng."
    echo -e "4. S·ª≠ d·ª•ng menu 'Qu·∫£n l√Ω h·ªá th·ªëng' ƒë·ªÉ theo d√µi v√† b·∫£o tr√¨."
    echo -e "${GREEN}================================================================================================${NC}"
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..."
}

# ==============================================================================
# V√≤ng l·∫∑p ch√≠nh
# ==============================================================================
main_loop() {
    while true; do
        show_menu
        read -p "Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n [1-9]: " choice
        case $choice in
            1) 
                echo -e "${GREEN}Ch·∫°y t·∫•t c·∫£ c√°c module...${NC}"
                install_glpi_module
                read_install_info
                setup_backup_module
                update_glpi_module
                harden_server_module
                install_plugins_module
                show_final_info
                ;;
            2) install_glpi_module ;;
            3) setup_backup_module ;;
            4) update_glpi_module ;;
            5) harden_server_module ;;
            6) install_plugins_module ;;
            7) management_loop ;;
            8) health_check; read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu..." ;;
            9) echo -e "Tho√°t script."; exit 0 ;;
            *) echo -e "${RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.${NC}"; sleep 2 ;;
        esac
    done
}

# ==============================================================================
# TH·ª∞C THI CH√çNH
# ==============================================================================

check_root

echo -e "${GREEN}Kh·ªüi ƒë·ªông c√¥ng c·ª• qu·∫£n l√Ω GLPI to√†n di·ªán...${NC}"

# Ki·ªÉm tra v√† c√†i ƒë·∫∑t prerequisites
check_dependencies || {
    read -p "C√≥ dependencies b·ªã thi·∫øu. Ti·∫øp t·ª•c c√†i ƒë·∫∑t t·ª± ƒë·ªông? (y/N): " continue_choice
    if [[ "$continue_choice" != "y" && "$continue_choice" != "Y" ]]; then
        exit 1
    fi
}

log_and_echo "ƒêang c√†i ƒë·∫∑t c√°c g√≥i c√¥ng c·ª• c·∫ßn thi·∫øt cho script..."
apt update
apt install -y curl wget unzip vim dnsutils openssl git cron ufw fail2ban composer

# Ki·ªÉm tra PHP compatibility
check_php_compatibility || {
    read -p "PHP kh√¥ng t∆∞∆°ng th√≠ch. Ti·∫øp t·ª•c c√≥ th·ªÉ g√¢y l·ªói. Ti·∫øp t·ª•c? (y/N): " php_choice
    if [[ "$php_choice" != "y" && "$php_choice" != "Y" ]]; then
        exit 1
    fi
}

get_latest_glpi_version

# L·∫•y IP Public m·ªôt l·∫ßn cho to√†n script
get_public_ip > /dev/null

# B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p menu
main_loop