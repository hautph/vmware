<%- include('../partials/header.ejs', { title: t('glossary.title') }) %>

<!-- Enhanced Glossary Header -->
<div class="glossary-header text-center">
    <div class="container">
        <h1 class="display-4 fw-bold"><i class="bi bi-book"></i> <%= t('glossary.title') %></h1>
        <p class="lead fs-4"><%= t('glossary.description') %></p>
        <p class="mb-0">Explore key components, features, and best practices across all VMware technologies</p>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-12">
            <!-- Enhanced Search Section -->
            <div class="card glossary-search-card mb-4">
                <div class="card-body p-4">
                    <h3 class="card-title mb-3 text-center"><i class="bi bi-search"></i> Find VMware Terms</h3>
                    <form action="/glossary/search" method="GET" id="glossarySearchForm">
                        <div class="input-group input-group-lg">
                            <input type="text" class="form-control glossary-search-input" name="q" placeholder="<%= t('glossary.search_placeholder') %>" required autocomplete="off">
                            <button class="btn btn-primary glossary-search-btn" type="submit">
                                <i class="bi bi-search"></i> <%= t('glossary.search') %>
                            </button>
                        </div>
                        <!-- Suggestions dropdown -->
                        <div id="searchSuggestions" class="search-suggestions-dropdown d-none">
                            <ul class="list-group"></ul>
                        </div>
                    </form>
                </div>
            </div>
            
            <!-- Category Filter -->
            <div class="card category-filter-card mb-4">
                <div class="card-header category-filter-header">
                    <h5 class="mb-0"><i class="bi bi-funnel"></i> <%= t('glossary.filter_category') %></h5>
                </div>
                <div class="card-body">
                    <div class="d-flex flex-wrap justify-content-center">
                        <a href="/glossary?category=all" 
                           class="btn category-btn <%= categoryFilter === 'all' ? 'btn-primary active' : 'btn-outline-primary' %>"
                           data-category="all">
                            <i class="bi bi-grid"></i> <%= t('glossary.all_categories') %>
                        </a>
                        <% categories.forEach(category => { %>
                            <a href="/glossary?category=<%= encodeURIComponent(category) %>" 
                               class="btn category-btn <%= categoryFilter === category ? 'btn-primary active' : 'btn-outline-primary' %>"
                               data-category="<%= category %>">
                                <% const normalizedCategory = category.replace(/\s+/g, '_'); %>
                                <%= t('glossary.categories.' + normalizedCategory) || category.replace(/_/g, ' ') %>
                            </a>
                        <% }); %>
                    </div>
                </div>
            </div>
            
            <!-- Results Info -->
            <div class="alert results-info text-center">
                <h5 class="mb-0">
                    <i class="bi bi-info-circle"></i> 
                    <span id="resultsInfo"><%= t('glossary.results_info', { 
                        count: terms.length, 
                        total: totalTerms, 
                        categoryText: categoryFilter !== 'all' ? t('glossary.results_info_category', { category: t('glossary.categories.' + categoryFilter) || categoryFilter.replace(/_/g, ' ') }) : t('glossary.results_info_all') 
                    }) %></span>
                </h5>
            </div>
            
            <!-- Loading indicator -->
            <div id="loadingIndicator" class="text-center d-none">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading more terms...</p>
            </div>
            
            <!-- Terms by Category -->
            <div id="glossaryContent">
                <% if (Object.keys(displayCategories).length > 0) { %>
                    <% Object.keys(displayCategories).forEach(category => { %>
                        <div class="category-section" data-category="<%= category %>">
                            <div class="category-section-header">
                                <h3 class="category-section-title mb-0">
                                    <i class="bi bi-folder"></i> <% const normalizedCategory = category.replace(/\s+/g, '_'); %>
                                    <%= t('glossary.categories.' + normalizedCategory) || category.replace(/_/g, ' ') %>
                                    <span class="badge bg-primary ms-2"><%= displayCategories[category].length %> terms</span>
                                </h3>
                            </div>
                            <div class="row" id="category-<%= category.replace(/[^a-zA-Z0-9]/g, '-') %>">
                                <% displayCategories[category].forEach(term => { %>
                                    <div class="col-lg-6 col-xl-4 mb-4">
                                        <div class="card term-card h-100">
                                            <div class="card-body d-flex flex-column">
                                                <h4 class="term-card-title">
                                                    <% const termTitle = term.title || term.term; %>
                                                    <% if (termTitle.startsWith('[VI]')) { %>
                                                        <%- termTitle.replace('[VI] ', '') %>
                                                    <% } else { %>
                                                        <%- termTitle %>
                                                    <% } %>
                                                </h4>
                                                <span class="term-card-category"><%= term.category %></span>
                                                <p class="term-card-definition flex-grow-1"><%= term.definition.substring(0, 150) %>...</p>
                                                <a href="/glossary/term/<%= term.fileKey || term.term.toLowerCase().replace(/\s+/g, '-') %>" 
                                                   class="btn btn-primary term-card-btn mt-auto">
                                                    <i class="bi bi-book"></i> <%= t('glossary.learn_more') %>
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="alert alert-warning text-center">
                        <h4><i class="bi bi-exclamation-triangle"></i> No Terms Found</h4>
                        <p><%= t('glossary.no_results') %></p>
                    </div>
                <% } %>
            </div>
            
            <!-- End of content indicator -->
            <div id="endOfContent" class="text-center d-none">
                <p><i class="bi bi-check-circle-fill text-success"></i> All terms loaded</p>
            </div>
            
            <!-- Data for JavaScript -->
            <div id="glossary-data" 
                 data-total-pages="<%= totalPages %>" 
                 data-total-terms="<%= totalTerms %>" 
                 data-loaded-terms="<%= terms.length %>" 
                 data-category-filter="<%= categoryFilter %>"
                 class="d-none">
            </div>
        </div>
    </div>
</div>

<!-- Add search functionality -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.querySelector('.glossary-search-input');
    const suggestionsContainer = document.getElementById('searchSuggestions');
    const suggestionsList = suggestionsContainer.querySelector('ul');
    const glossaryContent = document.getElementById('glossaryContent');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const endOfContent = document.getElementById('endOfContent');
    const resultsInfo = document.getElementById('resultsInfo');
    const categoryButtons = document.querySelectorAll('.category-btn');
    const glossaryData = document.getElementById('glossary-data');
    
    let currentPage = 1;
    let isLoading = false;
    let hasMore = parseInt(glossaryData.getAttribute('data-total-pages')) > 1;
    let currentCategory = glossaryData.getAttribute('data-category-filter');
    let totalTerms = parseInt(glossaryData.getAttribute('data-total-terms'));
    let loadedTerms = parseInt(glossaryData.getAttribute('data-loaded-terms'));
    
    let debounceTimer;
    
    // Handle input for autocomplete
    searchInput.addEventListener('input', function() {
        const query = this.value.trim();
        
        // Clear previous timer
        clearTimeout(debounceTimer);
        
        // Hide suggestions if query is too short
        if (query.length < 2) {
            suggestionsContainer.classList.add('d-none');
            return;
        }
        
        // Debounce API calls
        debounceTimer = setTimeout(() => {
            fetch(`/glossary/api/suggestions?q=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(suggestions => {
                    if (suggestions.length > 0) {
                        // Clear previous suggestions
                        suggestionsList.innerHTML = '';
                        
                        // Add new suggestions
                        suggestions.forEach(suggestion => {
                            const li = document.createElement('li');
                            li.className = 'list-group-item list-group-item-action';
                            li.textContent = suggestion.title || suggestion.term;
                            li.addEventListener('click', () => {
                                searchInput.value = suggestion.title || suggestion.term;
                                suggestionsContainer.classList.add('d-none');
                                document.getElementById('glossarySearchForm').submit();
                            });
                            suggestionsList.appendChild(li);
                        });
                        
                        // Show suggestions
                        suggestionsContainer.classList.remove('d-none');
                    } else {
                        suggestionsContainer.classList.add('d-none');
                    }
                })
                .catch(error => {
                    console.error('Error fetching suggestions:', error);
                    suggestionsContainer.classList.add('d-none');
                });
        }, 300); // 300ms debounce
    });
    
    // Hide suggestions when clicking outside
    document.addEventListener('click', function(event) {
        if (!searchInput.contains(event.target) && !suggestionsContainer.contains(event.target)) {
            suggestionsContainer.classList.add('d-none');
        }
    });
    
    // Handle keyboard navigation
    searchInput.addEventListener('keydown', function(event) {
        const items = suggestionsList.querySelectorAll('li');
        if (items.length === 0) return;
        
        const activeItem = suggestionsList.querySelector('li.active');
        let activeIndex = activeItem ? Array.from(items).indexOf(activeItem) : -1;
        
        switch (event.key) {
            case 'ArrowDown':
                event.preventDefault();
                activeIndex = (activeIndex + 1) % items.length;
                break;
            case 'ArrowUp':
                event.preventDefault();
                activeIndex = activeIndex <= 0 ? items.length - 1 : activeIndex - 1;
                break;
            case 'Enter':
                if (activeItem) {
                    event.preventDefault();
                    activeItem.click();
                }
                return;
            case 'Escape':
                suggestionsContainer.classList.add('d-none');
                return;
        }
        
        // Update active item
        items.forEach((item, index) => {
            item.classList.toggle('active', index === activeIndex);
        });
    });
    
    // Handle category filtering
    categoryButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const category = this.getAttribute('data-category');
            
            // Update active button
            categoryButtons.forEach(btn => btn.classList.remove('active', 'btn-primary'));
            categoryButtons.forEach(btn => btn.classList.add('btn-outline-primary'));
            this.classList.remove('btn-outline-primary');
            this.classList.add('btn-primary', 'active');
            
            // Reset state
            currentCategory = category;
            currentPage = 1;
            loadedTerms = 0;
            hasMore = true;
            
            // Clear content and load new terms
            glossaryContent.innerHTML = '';
            loadingIndicator.classList.remove('d-none');
            endOfContent.classList.add('d-none');
            
            // Update total terms count for the selected category
            // We need to fetch the actual count for the selected category
            fetch(`/glossary/api/more-terms?category=${encodeURIComponent(category)}&page=1`)
                .then(response => response.json())
                .then(data => {
                    // For 'all' categories, use the total from initial data
                    // For specific categories, we'll update this after loading the first page
                    if (category === 'all') {
                        const glossaryData = document.getElementById('glossary-data');
                        totalTerms = parseInt(glossaryData.getAttribute('data-total-terms'));
                    } else {
                        // For specific categories, use the total terms count from the API response
                        totalTerms = data.totalTerms || 0;
                    }
                    
                    // Now load the terms
                    loadMoreTerms();
                })
                .catch(error => {
                    console.error('Error fetching category count:', error);
                    // Fallback to using the total terms from initial data
                    const glossaryData = document.getElementById('glossary-data');
                    totalTerms = parseInt(glossaryData.getAttribute('data-total-terms'));
                    
                    // Still load the terms even if we couldn't get the count
                    loadMoreTerms();
                });
            
            // Return early since we're handling the loading in the fetch callback
            return;
            // This line is now handled in the fetch callback above
        });
    });
    
    // Function to load more terms
    function loadMoreTerms() {
        if (isLoading || !hasMore) return;
        
        isLoading = true;
        loadingIndicator.classList.remove('d-none');
        
        fetch(`/glossary/api/more-terms?category=${encodeURIComponent(currentCategory)}&page=${currentPage}`)
            .then(response => response.json())
            .then(data => {
                // Update state
                hasMore = data.hasMore;
                currentPage = data.nextPage;
                
                // Process the loaded terms
                if (Object.keys(data.displayCategories).length > 0) {
                    Object.keys(data.displayCategories).forEach(category => {
                        const terms = data.displayCategories[category];
                        
                        // Check if category section already exists
                        let categorySection = document.querySelector(`.category-section[data-category="${category}"]`);
                        
                        if (!categorySection) {
                            // Create new category section
                            categorySection = document.createElement('div');
                            categorySection.className = 'category-section';
                            categorySection.setAttribute('data-category', category);
                            const normalizedCategory = category.replace(/\s+/g, '_');
                            const categoryDisplayName = normalizedCategory.replace(/_/g, ' ');
                            categorySection.innerHTML = `
                                <div class="category-section-header">
                                    <h3 class="category-section-title mb-0">
                                        <i class="bi bi-folder"></i> ${categoryDisplayName}
                                        <span class="badge bg-primary ms-2">${terms.length} terms</span>
                                    </h3>
                                </div>
                                <div class="row" id="category-${category.replace(/[^a-zA-Z0-9]/g, '-')}"></div>
                            `;
                            glossaryContent.appendChild(categorySection);
                        }
                        
                        // Get the row container for this category
                        const rowContainer = categorySection.querySelector(`#category-${category.replace(/[^a-zA-Z0-9]/g, '-')}`);
                        
                        // Add terms to the category
                        if (rowContainer) {
                            terms.forEach(term => {
                                const termCard = document.createElement('div');
                                termCard.className = 'col-lg-6 col-xl-4 mb-4';
                                
                                // Create proper term link
                                const termLink = '/glossary/term/' + (term.fileKey || term.term.toLowerCase().replace(/\s+/g, '-'));
                                
                                termCard.innerHTML = `
                                    <div class="card term-card h-100">
                                        <div class="card-body d-flex flex-column">
                                            <h4 class="term-card-title">${term.title || term.term}</h4>
                                            <span class="term-card-category">${term.category || ''}</span>
                                            <p class="term-card-definition flex-grow-1">${(term.definition || '').substring(0, 150)}...</p>
                                            <a href="${termLink}" 
                                               class="btn btn-primary term-card-btn mt-auto">
                                                <i class="bi bi-book"></i> Learn More
                                            </a>
                                        </div>
                                    </div>
                                `;
                                rowContainer.appendChild(termCard);
                            });
                            
                            // Update loaded terms count
                            loadedTerms += terms.length;
                            
                            // Update category badge with total count for this category
                            const badge = categorySection.querySelector('.badge');
                            if (badge) {
                                // For category filtering, show total terms in category
                                if (currentCategory !== 'all') {
                                    // Get the actual count of terms in this category
                                    const categoryTerms = data.displayCategories[category] || [];
                                    badge.textContent = `${categoryTerms.length} terms`;
                                } else {
                                    // For 'all' view, show terms in current batch
                                    badge.textContent = `${terms.length} terms`;
                                }
                            }
                        }
                    });
                }
                
                // Update results info
                const categoryText = currentCategory !== 'all' ? currentCategory.replace(/_/g, ' ') : 'All Categories';
                resultsInfo.innerHTML = `Showing <strong>${loadedTerms}</strong> of <strong>${totalTerms}</strong> terms in <strong>${categoryText}</strong>`;
                
                // Hide loading indicator
                loadingIndicator.classList.add('d-none');
                isLoading = false;
                
                // Show end of content if no more terms
                if (!hasMore) {
                    endOfContent.classList.remove('d-none');
                }
            })
            .catch(error => {
                console.error('Error loading more terms:', error);
                loadingIndicator.classList.add('d-none');
                isLoading = false;
            });
    }
    
    // Handle infinite scroll
    window.addEventListener('scroll', function() {
        if (isLoading || !hasMore) return;
        
        const scrollPosition = window.innerHeight + window.scrollY;
        const pageHeight = document.body.offsetHeight - 500; // Trigger 500px before end
        
        if (scrollPosition >= pageHeight) {
            loadMoreTerms();
        }
    });
});
</script>

<style>
.search-suggestions-dropdown {
    position: absolute;
    z-index: 1000;
    width: 100%;
    max-height: 300px;
    overflow-y: auto;
    background: white;
    border: 1px solid #ddd;
    border-radius: 0.375rem;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    margin-top: 5px;
}

.search-suggestions-dropdown ul {
    margin-bottom: 0;
}

.search-suggestions-dropdown li {
    cursor: pointer;
}

.search-suggestions-dropdown li:hover,
.search-suggestions-dropdown li.active {
    background-color: #0d6efd;
    color: white;
}
</style>

<%- include('../partials/footer.ejs') %>