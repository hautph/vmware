<%- include('../partials/header.ejs', { title: exam.title }) %>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/exam">Exam Modules</a></li>
                    <li class="breadcrumb-item active" aria-current="page"><%= exam.title %></li>
                </ol>
            </nav>
            
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="mb-0"><i class="bi bi-clipboard-check"></i> <%= exam.title %></h1>
                    <p class="text-muted mb-0">Module: <%= exam.module %> | Total Questions: <%= exam.total_questions %></p>
                </div>
                <div>
                    <button id="startExamBtn" class="btn btn-success">
                        <i class="bi bi-play-circle"></i> Start Exam
                    </button>
                    <button id="pauseExamBtn" class="btn btn-warning d-none">
                        <i class="bi bi-pause-circle"></i> Pause Exam
                    </button>
                    <button id="exitExamBtn" class="btn btn-danger d-none">
                        <i class="bi bi-x-circle"></i> Exit Exam
                    </button>
                </div>
            </div>
            
            <!-- Exam Introduction Screen -->
            <div id="examIntroduction">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-info-circle"></i> Exam Instructions and Rules</h5>
                    </div>
                    <div class="card-body">
                        <h6>General Information</h6>
                        <ul>
                            <li><strong>Total Questions:</strong> <%= exam.total_questions %></li>
                            <li><strong>Module:</strong> <%= exam.module %></li>
                            <li><strong>Time Limit:</strong> No time limit for practice exams</li>
                        </ul>
                        
                        <h6>Exam Rules</h6>
                        <ol>
                            <li>This is a practice exam to help you prepare for the actual VMware certification exam</li>
                            <li>Read each question carefully before answering</li>
                            <li>Select the most appropriate answer(s) for each question</li>
                            <li>Use the "Flag Question" feature to mark questions for review</li>
                            <li>You can navigate between questions using the summary grid</li>
                            <li>Review your answers before submitting the exam</li>
                        </ol>
                        
                        <h6>Features</h6>
                        <ul>
                            <li>Question flagging for review</li>
                            <li>Progress tracking</li>
                            <li>Answer review before submission</li>
                            <li>Detailed results with performance analysis</li>
                        </ul>
                        
                        <div class="alert alert-warning">
                            <h6><i class="bi bi-exclamation-triangle"></i> Important</h6>
                            <p>Click "Start Exam" below to begin the practice exam. Once started, you can pause or exit the exam at any time.</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div id="examContent" class="d-none">
                <%- content %>
            </div>
            
            <div id="examInterface" class="d-none">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Exam in Progress</h5>
                            <div>
                                <span class="badge bg-primary">Question <span id="currentQuestion">1</span> of <span id="totalQuestions">0</span></span>
                                <span class="badge bg-success ms-2">Time: <span id="timer">00:00</span></span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-lg-9">
                                <div id="questionContainer">
                                    <!-- Questions will be loaded here dynamically -->
                                </div>
                                <div class="d-flex justify-content-between mt-4">
                                    <button id="prevBtn" class="btn btn-secondary" disabled>Previous</button>
                                    <button id="nextBtn" class="btn btn-primary">Next</button>
                                    <button id="submitBtn" class="btn btn-success d-none">Submit Exam</button>
                                </div>
                            </div>
                            <div class="col-lg-3">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">Exam Progress</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="d-grid gap-2">
                                            <button id="reviewBtn" class="btn btn-info btn-sm">
                                                <i class="bi bi-list-check"></i> Review Answers
                                            </button>
                                            <button id="flagBtn" class="btn btn-warning btn-sm">
                                                <i class="bi bi-flag"></i> Flag Question
                                            </button>
                                        </div>
                                        <hr>
                                        <h6>Questions Summary</h6>
                                        <div id="questionSummary" class="question-summary-grid">
                                            <!-- Question summary will be loaded here -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Review Modal -->
            <div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="reviewModalLabel">Review Your Answers</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div id="reviewContent">
                                <!-- Review content will be loaded here -->
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" id="submitExamBtn">Submit Exam</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.question-summary-grid {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 5px;
}

.question-summary-item {
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
}

.question-summary-item:not(.answered) {
    background-color: #e9ecef;
    color: #6c757d;
}

.question-summary-item.answered {
    background-color: #28a745;
    color: white;
}

.question-summary-item.current {
    border: 2px solid #007bff;
}

.question-summary-item.flagged {
    background-color: #ffc107;
    color: #000;
}

.review-question {
    border-bottom: 1px solid #dee2e6;
    padding-bottom: 15px;
    margin-bottom: 15px;
}

.review-question:last-child {
    border-bottom: none;
    margin-bottom: 0;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const startExamBtn = document.getElementById('startExamBtn');
    const examContent = document.getElementById('examContent');
    const examInterface = document.getElementById('examInterface');
    const questionContainer = document.getElementById('questionContainer');
    const currentQuestionEl = document.getElementById('currentQuestion');
    const totalQuestionsEl = document.getElementById('totalQuestions');
    const timerEl = document.getElementById('timer');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const submitBtn = document.getElementById('submitBtn');
    const reviewBtn = document.getElementById('reviewBtn');
    const flagBtn = document.getElementById('flagBtn');
    const questionSummary = document.getElementById('questionSummary');
    const reviewModal = new bootstrap.Modal(document.getElementById('reviewModal'));
    const submitExamBtn = document.getElementById('submitExamBtn');
    
    // Extract questions from the displayed content
    function extractQuestions() {
        const questions = [];
        const examContentDiv = document.getElementById('examContent');
        const questionElements = examContentDiv.querySelectorAll('h3');
        
        questionElements.forEach((element, index) => {
            const questionObj = {
                number: index + 1,
                title: element.textContent,
                content: '',
                options: [],
                type: 'single', // Default to single choice
                flagged: false
            };
            
            // Get the content and options that follow this question
            let nextElement = element.nextElementSibling;
            const contentElements = [];
            
            while (nextElement && nextElement.tagName !== 'H3') {
                // Check for question type indicators
                if (nextElement.textContent.includes('Select one or more:')) {
                    questionObj.type = 'multiple';
                } else if (nextElement.textContent.includes('Select one:')) {
                    questionObj.type = 'single';
                } else if (nextElement.tagName === 'OL') {
                    // Extract options from ordered list
                    const optionItems = nextElement.querySelectorAll('li');
                    optionItems.forEach((item, idx) => {
                        questionObj.options.push({
                            letter: String.fromCharCode(65 + idx),
                            text: item.textContent.trim()
                        });
                    });
                    break;
                } else {
                    contentElements.push(nextElement.outerHTML);
                }
                nextElement = nextElement.nextElementSibling;
            }
            
            questionObj.content = contentElements.join('');
            questions.push(questionObj);
        });
        
        return questions;
    }
    
    // Timer variables
    let startTime;
    let timerInterval;
    
    // Exam state
    let currentQuestion = 0;
    let userAnswers = {};
    let flaggedQuestions = {};
    let allQuestions = [];
    let timeTaken = '00:00';
    let examState = '<%= examState %>'; // introduction, active, paused
    
    // Start exam
    startExamBtn.addEventListener('click', function() {
        // Extract questions when starting the exam
        allQuestions = extractQuestions();
        totalQuestionsEl.textContent = allQuestions.length;
        
        // Hide introduction and show exam interface
        document.getElementById('examIntroduction').classList.add('d-none');
        examContent.classList.add('d-none');
        examInterface.classList.remove('d-none');
        
        // Update button visibility
        startExamBtn.classList.add('d-none');
        pauseExamBtn.classList.remove('d-none');
        exitExamBtn.classList.remove('d-none');
        
        // Set exam state to active
        examState = 'active';
        
        startTimer();
        loadQuestion();
        renderQuestionSummary();
    });
    
    // Pause exam
    pauseExamBtn.addEventListener('click', function() {
        if (examState === 'active') {
            // Pause the timer
            clearInterval(timerInterval);
            
            // Update button text and state
            pauseExamBtn.innerHTML = '<i class="bi bi-play-circle"></i> Resume Exam';
            examState = 'paused';
            
            // Show a pause message
            questionContainer.innerHTML = `
                <div class="text-center py-5">
                    <h3><i class="bi bi-pause-circle text-warning"></i> Exam Paused</h3>
                    <p class="lead">The exam is currently paused. Click "Resume Exam" to continue.</p>
                </div>
            `;
        } else if (examState === 'paused') {
            // Resume the timer
            startTimer();
            
            // Update button text and state
            pauseExamBtn.innerHTML = '<i class="bi bi-pause-circle"></i> Pause Exam';
            examState = 'active';
            
            // Reload the current question
            loadQuestion();
        }
    });
    
    // Exit exam
    exitExamBtn.addEventListener('click', function() {
        if (confirm('Are you sure you want to exit this exam? Your progress will be lost.')) {
            // Stop the timer
            clearInterval(timerInterval);
            
            // Reset exam state
            examState = 'introduction';
            
            // Reset UI to introduction state
            document.getElementById('examIntroduction').classList.remove('d-none');
            examContent.classList.add('d-none');
            examInterface.classList.add('d-none');
            
            // Reset buttons
            startExamBtn.classList.remove('d-none');
            pauseExamBtn.classList.add('d-none');
            exitExamBtn.classList.add('d-none');
            pauseExamBtn.innerHTML = '<i class="bi bi-pause-circle"></i> Pause Exam'; // Reset button text
            
            // Reset exam data
            currentQuestion = 0;
            userAnswers = {};
            flaggedQuestions = {};
            allQuestions = [];
            timeTaken = '00:00';
            
            // Reset timer display
            timerEl.textContent = '00:00';
        }
    });
    
    // Timer function
    function startTimer() {
        startTime = new Date();
        timerInterval = setInterval(updateTimer, 1000);
    }
    
    function updateTimer() {
        const now = new Date();
        const diff = Math.floor((now - startTime) / 1000);
        const minutes = Math.floor(diff / 60).toString().padStart(2, '0');
        const seconds = (diff % 60).toString().padStart(2, '0');
        timeTaken = minutes + ':' + seconds;
        timerEl.textContent = timeTaken;
    }
    
    // Save user answer
    function saveAnswer() {
        const selectedOptions = [];
        const inputs = questionContainer.querySelectorAll('input[name="answer"]:checked');
        
        inputs.forEach(input => {
            selectedOptions.push(input.value);
        });
        
        // For single choice questions, we want to store only the selected option
        // For multiple choice questions, we want to store all selected options
        if (selectedOptions.length > 0) {
            userAnswers[currentQuestion] = selectedOptions;
        } else {
            delete userAnswers[currentQuestion];
        }
        
        renderQuestionSummary();
    }
    
    // Load question
    function loadQuestion() {
        if (allQuestions.length === 0) {
            questionContainer.innerHTML = '<p>No questions available.</p>';
            return;
        }
        
        if (currentQuestion >= allQuestions.length) {
            currentQuestion = allQuestions.length - 1;
        }
        
        const question = allQuestions[currentQuestion];
        let optionsHtml = '';
        
        question.options.forEach(option => {
            const inputType = question.type === 'multiple' ? 'checkbox' : 'radio';
            const isChecked = userAnswers[currentQuestion] && userAnswers[currentQuestion].includes(option.letter) ? 'checked' : '';
            optionsHtml += `
                <div class="form-check">
                    <input class="form-check-input" type="${inputType}" name="answer" id="option${option.letter}" value="${option.letter}" ${isChecked}>
                    <label class="form-check-label" for="option${option.letter}">${option.letter}. ${option.text}</label>
                </div>
            `;
        });
        
        questionContainer.innerHTML = `
            <div class="question">
                <h5>${question.title}</h5>
                <div class="question-content">${question.content}</div>
                <div class="options mt-3">
                    <p><strong>${question.type === 'multiple' ? 'Select one or more:' : 'Select one:'}</strong></p>
                    ${optionsHtml}
                </div>
            </div>
        `;
        
        // Add event listeners to options
        const optionInputs = questionContainer.querySelectorAll('input[name="answer"]');
        optionInputs.forEach(input => {
            input.addEventListener('change', saveAnswer);
        });
        
        updateNavigation();
        updateFlagButton();
    }
    
    // Update navigation buttons
    function updateNavigation() {
        currentQuestionEl.textContent = currentQuestion + 1;
        
        // Enable/disable buttons based on current position
        prevBtn.disabled = (currentQuestion === 0);
        
        if (currentQuestion === allQuestions.length - 1) {
            nextBtn.classList.add('d-none');
            submitBtn.classList.remove('d-none');
        } else {
            nextBtn.classList.remove('d-none');
            submitBtn.classList.add('d-none');
        }
    }
    
    // Update flag button
    function updateFlagButton() {
        if (allQuestions[currentQuestion].flagged) {
            flagBtn.innerHTML = '<i class="bi bi-flag-fill"></i> Unflag Question';
            flagBtn.classList.remove('btn-warning');
            flagBtn.classList.add('btn-outline-warning');
        } else {
            flagBtn.innerHTML = '<i class="bi bi-flag"></i> Flag Question';
            flagBtn.classList.remove('btn-outline-warning');
            flagBtn.classList.add('btn-warning');
        }
    }
    
    // Render question summary
    function renderQuestionSummary() {
        let summaryHtml = '';
        for (let i = 0; i < allQuestions.length; i++) {
            const isAnswered = userAnswers[i] && userAnswers[i].length > 0;
            const isFlagged = allQuestions[i].flagged;
            const isCurrent = i === currentQuestion;
            
            let classes = 'question-summary-item';
            if (isAnswered) classes += ' answered';
            if (isFlagged) classes += ' flagged';
            if (isCurrent) classes += ' current';
            
            summaryHtml += `<div class="${classes}" data-question="${i}">${i + 1}</div>`;
        }
        questionSummary.innerHTML = summaryHtml;
        
        // Add click event listeners to summary items
        const summaryItems = questionSummary.querySelectorAll('.question-summary-item');
        summaryItems.forEach(item => {
            item.addEventListener('click', function() {
                const questionIndex = parseInt(this.getAttribute('data-question'));
                currentQuestion = questionIndex;
                loadQuestion();
            });
        });
    }
    
    // Navigation event listeners
    prevBtn.addEventListener('click', function() {
        if (examState === 'active' && currentQuestion > 0) {
            currentQuestion--;
            loadQuestion();
        }
    });
    
    nextBtn.addEventListener('click', function() {
        if (examState === 'active') {
            saveAnswer();
            if (currentQuestion < allQuestions.length - 1) {
                currentQuestion++;
                loadQuestion();
            }
        }
    });
    
    // Flag question
    flagBtn.addEventListener('click', function() {
        if (examState === 'active') {
            allQuestions[currentQuestion].flagged = !allQuestions[currentQuestion].flagged;
            updateFlagButton();
            renderQuestionSummary();
        }
    });
    
    // Review answers
    reviewBtn.addEventListener('click', function() {
        if (examState === 'active') {
            saveAnswer();
            // Show first page of review
            showReviewPage(1);
            reviewModal.show();
        }
    });
    
    // Pagination variables for review
    const questionsPerPage = 10;
    let currentPage = 1;
    
    // Show specific page of review
    function showReviewPage(page) {
        currentPage = page;
        const startIndex = (page - 1) * questionsPerPage;
        const endIndex = Math.min(startIndex + questionsPerPage, allQuestions.length);
        
        let reviewHtml = `
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="mb-0">Your Answers</h5>
                <div>
                    <span class="badge bg-primary">Page ${page} of ${Math.ceil(allQuestions.length / questionsPerPage)}</span>
                </div>
            </div>
        `;
        
        for (let i = startIndex; i < endIndex; i++) {
            const question = allQuestions[i];
            const userAnswer = userAnswers[i];
            
            reviewHtml += `
                <div class="review-question">
                    <h6>Question ${i + 1}: ${question.title.replace('Question ' + (i + 1), '')}</h6>
                    <p><strong>Your Answer:</strong> `;
            
            if (userAnswer && userAnswer.length > 0) {
                reviewHtml += userAnswer.join(', ');
            } else {
                reviewHtml += '<span class="text-muted">Not answered</span>';
            }
            
            reviewHtml += `</p>
                    ${question.flagged ? '<span class="badge bg-warning">Flagged</span>' : ''}
                </div>
            `;
        }
        
        // Add pagination controls
        reviewHtml += `
            <div class="d-flex justify-content-between mt-4">
                <button id="prevReviewPage" class="btn btn-secondary" ${page === 1 ? 'disabled' : ''}>
                    <i class="bi bi-chevron-left"></i> Previous
                </button>
                <div class="text-center">
                    Page ${page} of ${Math.ceil(allQuestions.length / questionsPerPage)}
                </div>
                <button id="nextReviewPage" class="btn btn-secondary" ${page === Math.ceil(allQuestions.length / questionsPerPage) ? 'disabled' : ''}>
                    Next <i class="bi bi-chevron-right"></i>
                </button>
            </div>
        `;
        
        document.getElementById('reviewContent').innerHTML = reviewHtml;
        
        // Add event listeners for pagination buttons
        const prevReviewPageBtn = document.getElementById('prevReviewPage');
        const nextReviewPageBtn = document.getElementById('nextReviewPage');
        
        if (prevReviewPageBtn) {
            prevReviewPageBtn.addEventListener('click', function() {
                if (currentPage > 1) {
                    showReviewPage(currentPage - 1);
                }
            });
        }
        
        if (nextReviewPageBtn) {
            nextReviewPageBtn.addEventListener('click', function() {
                if (currentPage < Math.ceil(allQuestions.length / questionsPerPage)) {
                    showReviewPage(currentPage + 1);
                }
            });
        }
    }
    
    // Submit exam via modal
    submitExamBtn.addEventListener('click', function() {
        if (examState === 'active') {
            saveAnswer();
            clearInterval(timerInterval);
            
            // Create form to submit results
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = `/exam/<%= exam.id %>/submit`;
            
            // Add user answers
            const answersInput = document.createElement('input');
            answersInput.type = 'hidden';
            answersInput.name = 'userAnswers';
            answersInput.value = JSON.stringify(userAnswers);
            form.appendChild(answersInput);
            
            // Add time taken
            const timeInput = document.createElement('input');
            timeInput.type = 'hidden';
            timeInput.name = 'timeTaken';
            timeInput.value = timeTaken;
            form.appendChild(timeInput);
            
            // Add flagged questions
            const flaggedInput = document.createElement('input');
            flaggedInput.type = 'hidden';
            flaggedInput.name = 'flaggedQuestions';
            flaggedInput.value = JSON.stringify(flaggedQuestions);
            form.appendChild(flaggedInput);
            
            document.body.appendChild(form);
            form.submit();
        }
    });
    
    // Submit exam directly (without review)
    submitBtn.addEventListener('click', function() {
        if (examState === 'active') {
            saveAnswer();
            clearInterval(timerInterval);
            
            // Create form to submit results
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = `/exam/<%= exam.id %>/submit`;
            
            // Add user answers
            const answersInput = document.createElement('input');
            answersInput.type = 'hidden';
            answersInput.name = 'userAnswers';
            answersInput.value = JSON.stringify(userAnswers);
            form.appendChild(answersInput);
            
            // Add time taken
            const timeInput = document.createElement('input');
            timeInput.type = 'hidden';
            timeInput.name = 'timeTaken';
            timeInput.value = timeTaken;
            form.appendChild(timeInput);
            
            // Add flagged questions
            const flaggedInput = document.createElement('input');
            flaggedInput.type = 'hidden';
            flaggedInput.name = 'flaggedQuestions';
            flaggedInput.value = JSON.stringify(flaggedQuestions);
            form.appendChild(flaggedInput);
            
            document.body.appendChild(form);
            form.submit();
        }
    });
});
</script>

<%- include('../partials/footer.ejs') %>